(()=>{var s={757:(s,n,t)=>{s.exports=t(666)},666:s=>{var n=function(s){"use strict";var n,t=Object.prototype,a=t.hasOwnProperty,e="function"==typeof Symbol?Symbol:{},l=e.iterator||"@@iterator",p=e.asyncIterator||"@@asyncIterator",i=e.toStringTag||"@@toStringTag";function r(s,n,t){return Object.defineProperty(s,n,{value:t,enumerable:!0,configurable:!0,writable:!0}),s[n]}try{r({},"")}catch(s){r=function(s,n,t){return s[n]=t}}function c(s,n,t,a){var e=n&&n.prototype instanceof m?n:m,l=Object.create(e.prototype),p=new P(a||[]);return l._invoke=function(s,n,t){var a=d;return function(e,l){if(a===u)throw new Error("Generator is already running");if(a===g){if("throw"===e)throw l;return O()}for(t.method=e,t.arg=l;;){var p=t.delegate;if(p){var i=L(p,t);if(i){if(i===f)continue;return i}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if(a===d)throw a=g,t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);a=u;var r=o(s,n,t);if("normal"===r.type){if(a=t.done?g:h,r.arg===f)continue;return{value:r.arg,done:t.done}}"throw"===r.type&&(a=g,t.method="throw",t.arg=r.arg)}}}(s,t,p),l}function o(s,n,t){try{return{type:"normal",arg:s.call(n,t)}}catch(s){return{type:"throw",arg:s}}}s.wrap=c;var d="suspendedStart",h="suspendedYield",u="executing",g="completed",f={};function m(){}function j(){}function v(){}var y={};r(y,l,(function(){return this}));var x=Object.getPrototypeOf,b=x&&x(x(T([])));b&&b!==t&&a.call(b,l)&&(y=b);var k=v.prototype=m.prototype=Object.create(y);function _(s){["next","throw","return"].forEach((function(n){r(s,n,(function(s){return this._invoke(n,s)}))}))}function w(s,n){function t(e,l,p,i){var r=o(s[e],s,l);if("throw"!==r.type){var c=r.arg,d=c.value;return d&&"object"==typeof d&&a.call(d,"__await")?n.resolve(d.__await).then((function(s){t("next",s,p,i)}),(function(s){t("throw",s,p,i)})):n.resolve(d).then((function(s){c.value=s,p(c)}),(function(s){return t("throw",s,p,i)}))}i(r.arg)}var e;this._invoke=function(s,a){function l(){return new n((function(n,e){t(s,a,n,e)}))}return e=e?e.then(l,l):l()}}function L(s,t){var a=s.iterator[t.method];if(a===n){if(t.delegate=null,"throw"===t.method){if(s.iterator.return&&(t.method="return",t.arg=n,L(s,t),"throw"===t.method))return f;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var e=o(a,s.iterator,t.arg);if("throw"===e.type)return t.method="throw",t.arg=e.arg,t.delegate=null,f;var l=e.arg;return l?l.done?(t[s.resultName]=l.value,t.next=s.nextLoc,"return"!==t.method&&(t.method="next",t.arg=n),t.delegate=null,f):l:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function E(s){var n={tryLoc:s[0]};1 in s&&(n.catchLoc=s[1]),2 in s&&(n.finallyLoc=s[2],n.afterLoc=s[3]),this.tryEntries.push(n)}function C(s){var n=s.completion||{};n.type="normal",delete n.arg,s.completion=n}function P(s){this.tryEntries=[{tryLoc:"root"}],s.forEach(E,this),this.reset(!0)}function T(s){if(s){var t=s[l];if(t)return t.call(s);if("function"==typeof s.next)return s;if(!isNaN(s.length)){var e=-1,p=function t(){for(;++e<s.length;)if(a.call(s,e))return t.value=s[e],t.done=!1,t;return t.value=n,t.done=!0,t};return p.next=p}}return{next:O}}function O(){return{value:n,done:!0}}return j.prototype=v,r(k,"constructor",v),r(v,"constructor",j),j.displayName=r(v,i,"GeneratorFunction"),s.isGeneratorFunction=function(s){var n="function"==typeof s&&s.constructor;return!!n&&(n===j||"GeneratorFunction"===(n.displayName||n.name))},s.mark=function(s){return Object.setPrototypeOf?Object.setPrototypeOf(s,v):(s.__proto__=v,r(s,i,"GeneratorFunction")),s.prototype=Object.create(k),s},s.awrap=function(s){return{__await:s}},_(w.prototype),r(w.prototype,p,(function(){return this})),s.AsyncIterator=w,s.async=function(n,t,a,e,l){void 0===l&&(l=Promise);var p=new w(c(n,t,a,e),l);return s.isGeneratorFunction(t)?p:p.next().then((function(s){return s.done?s.value:p.next()}))},_(k),r(k,i,"Generator"),r(k,l,(function(){return this})),r(k,"toString",(function(){return"[object Generator]"})),s.keys=function(s){var n=[];for(var t in s)n.push(t);return n.reverse(),function t(){for(;n.length;){var a=n.pop();if(a in s)return t.value=a,t.done=!1,t}return t.done=!0,t}},s.values=T,P.prototype={constructor:P,reset:function(s){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(C),!s)for(var t in this)"t"===t.charAt(0)&&a.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=n)},stop:function(){this.done=!0;var s=this.tryEntries[0].completion;if("throw"===s.type)throw s.arg;return this.rval},dispatchException:function(s){if(this.done)throw s;var t=this;function e(a,e){return i.type="throw",i.arg=s,t.next=a,e&&(t.method="next",t.arg=n),!!e}for(var l=this.tryEntries.length-1;l>=0;--l){var p=this.tryEntries[l],i=p.completion;if("root"===p.tryLoc)return e("end");if(p.tryLoc<=this.prev){var r=a.call(p,"catchLoc"),c=a.call(p,"finallyLoc");if(r&&c){if(this.prev<p.catchLoc)return e(p.catchLoc,!0);if(this.prev<p.finallyLoc)return e(p.finallyLoc)}else if(r){if(this.prev<p.catchLoc)return e(p.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<p.finallyLoc)return e(p.finallyLoc)}}}},abrupt:function(s,n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc<=this.prev&&a.call(e,"finallyLoc")&&this.prev<e.finallyLoc){var l=e;break}}l&&("break"===s||"continue"===s)&&l.tryLoc<=n&&n<=l.finallyLoc&&(l=null);var p=l?l.completion:{};return p.type=s,p.arg=n,l?(this.method="next",this.next=l.finallyLoc,f):this.complete(p)},complete:function(s,n){if("throw"===s.type)throw s.arg;return"break"===s.type||"continue"===s.type?this.next=s.arg:"return"===s.type?(this.rval=this.arg=s.arg,this.method="return",this.next="end"):"normal"===s.type&&n&&(this.next=n),f},finish:function(s){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.finallyLoc===s)return this.complete(t.completion,t.afterLoc),C(t),f}},catch:function(s){for(var n=this.tryEntries.length-1;n>=0;--n){var t=this.tryEntries[n];if(t.tryLoc===s){var a=t.completion;if("throw"===a.type){var e=a.arg;C(t)}return e}}throw new Error("illegal catch attempt")},delegateYield:function(s,t,a){return this.delegate={iterator:T(s),resultName:t,nextLoc:a},"next"===this.method&&(this.arg=n),f}},s}(s.exports);try{regeneratorRuntime=n}catch(s){"object"==typeof globalThis?globalThis.regeneratorRuntime=n:Function("r","regeneratorRuntime = r")(n)}}},n={};function t(a){var e=n[a];if(void 0!==e)return e.exports;var l=n[a]={exports:{}};return s[a](l,l.exports,t),l.exports}t.n=s=>{var n=s&&s.__esModule?()=>s.default:()=>s;return t.d(n,{a:n}),n},t.d=(s,n)=>{for(var a in n)t.o(n,a)&&!t.o(s,a)&&Object.defineProperty(s,a,{enumerable:!0,get:n[a]})},t.o=(s,n)=>Object.prototype.hasOwnProperty.call(s,n),(()=>{"use strict";function s(s,n){(null==n||n>s.length)&&(n=s.length);for(var t=0,a=new Array(n);t<n;t++)a[t]=s[t];return a}function n(n,t){if(n){if("string"==typeof n)return s(n,t);var a=Object.prototype.toString.call(n).slice(8,-1);return"Object"===a&&n.constructor&&(a=n.constructor.name),"Map"===a||"Set"===a?Array.from(n):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?s(n,t):void 0}}function a(s,t){return function(s){if(Array.isArray(s))return s}(s)||function(s,n){var t=null==s?null:"undefined"!=typeof Symbol&&s[Symbol.iterator]||s["@@iterator"];if(null!=t){var a,e,l=[],p=!0,i=!1;try{for(t=t.call(s);!(p=(a=t.next()).done)&&(l.push(a.value),!n||l.length!==n);p=!0);}catch(s){i=!0,e=s}finally{try{p||null==t.return||t.return()}finally{if(i)throw e}}return l}}(s,t)||n(s,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function e(s,n,t,a,e,l,p){try{var i=s[l](p),r=i.value}catch(s){return void t(s)}i.done?n(r):Promise.resolve(r).then(a,e)}function l(s){return function(){var n=this,t=arguments;return new Promise((function(a,l){var p=s.apply(n,t);function i(s){e(p,a,l,i,r,"next",s)}function r(s){e(p,a,l,i,r,"throw",s)}i(void 0)}))}}var p=t(757),i=t.n(p);function r(s){return new Promise(function(s){return function(n){setTimeout((function(){return n(s)}),250*(Math.round(5*Math.random())+1))}}({data:s}))}function c(s,n){var t=document.createElement(s);return n&&t.classList.add(n),t}function o(){return["#BF7950","#8C634A","#A6A6A6","#B3D5F2"].map((function(s){var n=document.createElement("div");return n.style.backgroundColor=s,n.style.width="400px",n.style.height="200px",n}))}const d=function(s){var n=s.elems,t=s.height,a=void 0===t?"100%":t,e=c("div","kui_scrollspy"),l=c("div","kui_scrollspy_itemwrap");l.style.height=a;for(var p=[],i=0;i<n.length;i++){var r=c("div","kui_scrollspy_item");r.appendChild(n[i]),l.appendChild(r),p.push(r)}var o=y({scrolldiv:l,elems:p});return e.appendChild(o),e.appendChild(l),e};function h(t){return function(n){if(Array.isArray(n))return s(n)}(t)||function(s){if("undefined"!=typeof Symbol&&null!=s[Symbol.iterator]||null!=s["@@iterator"])return Array.from(s)}(t)||n(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(s,n,t){var a=c("ul","sub"!==s?"kui_licontextmenu_ul":"kui_licontextmenu_subul");return n.map((function(s){var n=c("li","kui_licontextmenu_li");if(n.innerText=s.name,s.li){n.setAttribute("data-content",">");var t=u("sub",s.li,n);n.addEventListener("click",(function(s){s.stopPropagation(),t.style.display="block"===t.style.display?"none":"block"}))}else n.addEventListener("click",(function(n){n.stopPropagation(),s.act()}));a.appendChild(n)})),t.appendChild(a),a}const g=function(s){var n=s.init,t=void 0!==n&&n,a=s.setChecked,e=t,l=c("div","kui_checkbox"),p=c("div","kui_checkbox_outline");p.innerText="V";var i=c("div","kui_checkbox_background"),r=c("div","kui_checkbox_wave");return l.addEventListener("mousedown",(function(s){r.style.setProperty("--duration","0.3s"),r.style.opacity="1",r.style.setProperty("--scale","1")})),l.addEventListener("mouseup",(function(s){s.stopPropagation(),a(e=!e),e?(p.style.background="#252553",p.style.border="2px solid #252553"):(p.style.background="white",p.style.border="2px solid rgba(0, 0, 0, 0.5)"),r.style.setProperty("--duration","0s"),r.style.opacity="0",r.style.setProperty("--scale","0")})),l.appendChild(p),l.appendChild(r),l.appendChild(i),l};function f(s){var n=c("div","kui_dragablepannel_drag"),t=null;return s.addEventListener("mousedown",(function(a){var e,l;null===t&&a.target.closest(".kui_dragablepannel_drag")===n&&(e=a.offsetX,l=a.offsetY,t=function(t){var a=t.pageX-s.offsetLeft-e-1,p=t.pageY-s.offsetTop-l-1;n.style.setProperty("--x",a+"px"),n.style.setProperty("--y",p+"px")},s.addEventListener("mousemove",t))})),s.addEventListener("mouseup",(function(n){n.stopPropagation(),null!==t&&(s.removeEventListener("mousemove",t),t=null)})),s.addEventListener("mouseleave",(function(n){n.stopPropagation(),null!==t&&(s.removeEventListener("mousemove",t),t=null)})),n}function m(s,n,t){return n in s?Object.defineProperty(s,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):s[n]=t,s}function j(s,n){var t=Object.keys(s);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(s);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(s,n).enumerable}))),t.push.apply(t,a)}return t}function v(s){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?j(Object(t),!0).forEach((function(n){m(s,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(t)):j(Object(t)).forEach((function(n){Object.defineProperty(s,n,Object.getOwnPropertyDescriptor(t,n))}))}return s}const y=function(s){var n=s.scrolldiv,t=s.elems,e=c("div","kui_scrollnav"),l=[];e.style.setProperty("--num",t.length+"");for(var p=0;p<t.length;p++){var i=c("div","kui_scrollnav_item");0===p&&i.classList.add("select"),e.appendChild(i),l.push(i)}var r,o,d=(r=0,o=[],function(){return n.scrollHeight===r?o:(r=n.scrollHeight,o=t.map((function(s){var t=[s.offsetTop-n.offsetTop,s.clientHeight],a=t[0],e=t[1];return[a-e/2,a+e/2]})))});return n.addEventListener("scroll",(function(s){var n=s.target.scrollTop,t=d().findIndex((function(s){var t=a(s,2),e=t[0],l=t[1];return n>=e&&n<l}));l.forEach((function(s,n){n===t?s.classList.add("select"):s.classList.remove("select")}))})),e.addEventListener("click",(function(s){s.stopPropagation();var a=l.indexOf(s.target);n.scrollTop=t[a].offsetTop-n.offsetTop})),e};var x,b=["aaabbb","aaaaaa","aaccc","bbbccc"];const k={name:"Autocomplete",render:function(s){var n=s.fetcher,t=s.placeholder,a=void 0===t?"":t,e=c("div","kui_autocomplete"),p=c("input","kui_autocomplete_input"),r=c("ul","kui_autocomplete_ul");p.setAttribute("placeholder",a),e.appendChild(p),e.appendChild(r);var o,d,h=function(s){r.innerHTML="";for(var n=0;n<s.length;n++){var t=c("li","kui_autocomplete_li");t.innerText=s[n],t.addEventListener("click",(function(s){s.stopPropagation(),p.value=s.target.innerText,u(),r.style.display="none"})),r.appendChild(t)}},u=function(){var s=l(i().mark((function s(){var t,a,e;return i().wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,n();case 2:t=s.sent,a=t.data,e=p.value,h(""===e?a:a.filter((function(s){return-1!==s.search(e)&&""!==e})));case 6:case"end":return s.stop()}}),s)})));return function(){return s.apply(this,arguments)}}();return p.addEventListener("keyup",(o=function(){u()},500,d=null,function(){clearTimeout(d);for(var s=arguments.length,n=new Array(s),t=0;t<s;t++)n[t]=arguments[t];d=setTimeout(o.bind.apply(o,[null].concat(n)),500)})),p.addEventListener("focusin",(function(){r.style.display="block",u()})),window.addEventListener("click",(function(s){s.target.closest(".kui_autocomplete")||(r.style.display="none")})),e},prop:{fetcher:(x=l(i().mark((function s(){return i().wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,r(b);case 2:return s.abrupt("return",s.sent);case 3:case"end":return s.stop()}}),s)}))),function(){return x.apply(this,arguments)}),placeholder:'"aaa", "bbb" 등이 입력되어 있습니다'},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/autocomplete">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { autocomplete } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> autocomplete = <span class="hljs-title function_">autocomplete</span>({ \n  <span class="hljs-attr">fethcer</span>: <span class="hljs-keyword">async</span> () =&gt; {}, <span class="hljs-comment">/* get data function */</span>\n  <span class="hljs-attr">placeholder</span>: <span class="hljs-string">&#x27;explain of example&#x27;</span>\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(autocomplete);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">fetcher</td> <td align="left"><code>() =&gt; Promise&lt;{data: string[]}&gt;</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">서버로부터 데이터를 받아올 fetch method</td> </tr> <tr> <td align="left">placeholder</td> <td align="left"><code>string</code></td> <td align="left"><code>&#39;&#39;</code></td> <td align="left">no</td> <td align="left">input에 들어갈 placeholder 값</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>특정 단어를 입력시 해당 단어를 포함한 목록을 확인시켜주는 컴포넌트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_autocomplete&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_autocomplete_input&#x27;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_autocomplete_ul&#x27;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_autocomplete_li&#x27;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '},_={name:"Slide Carousel",render:function(s){var n=s.elems,t=s.auto,a=void 0!==t&&t,e=s.width,l=void 0===e?"100%":e,p=s.height,i=void 0===p?"100%":p,r=1,o=!1,d=null,u=c("div","kui_slidecarousel");u.style.setProperty("--width",l),u.style.height=i;var g=c("div","kui_slidecarousel_slider");g.style.setProperty("--num",n.length+2+"");var f=[n[n.length-1].cloneNode(!0)].concat(h(n),[n[0].cloneNode(!0)]);u.appendChild(g);var m=function(s,n){0!==n&&(o=!0),g.style.setProperty("--sec",n+"s"),g.style.setProperty("--idx",s+"")},j=function(){d=setInterval((function(){m(++r,.5)}),3e3)};return g.ontransitionend=function(){o=!1,0===r?(r=f.length-2,m(r,0)):r===f.length-1&&m(r=1,0)},function(){for(var s=0;s<f.length;s++){var n=c("div","kui_slidecarousel_item");n.appendChild(f[s]),g.appendChild(n)}var t=document.createElement("button");t.classList.add("kui_slidecarousel_rbutton"),t.innerText=">>";var e=document.createElement("button");e.classList.add("kui_slidecarousel_lbutton"),e.innerText="<<",u.appendChild(t),u.appendChild(e),t.addEventListener("click",(function(){o||(d&&clearInterval(d),m(++r,.5),a&&j())})),e.addEventListener("click",(function(){o||(d&&clearInterval(d),m(--r,.5),a&&j())}))}(),a&&j(),u},prop:{elems:o(),width:"400px",height:"200px"},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/slidecarousel">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { slidecarousel } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> slidecarousel = <span class="hljs-title function_">slidecarousel</span>({ \n  <span class="hljs-attr">elems</span>: <span class="hljs-comment">/* Element of carousel elements */</span>\n  <span class="hljs-attr">auto</span>: <span class="hljs-comment">/* auto carousel move flag */</span>\n  <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;carousel width, recommend same of elems&#x27;</span>,\n  <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;carousel height, recommend same of elems&#x27;</span>,\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(slidecarousel);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">elems</td> <td align="left"><code>HTMLElemet[]</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">캐러셀에 들어갈 엘리먼트 리스트</td> </tr> <tr> <td align="left">auto</td> <td align="left"><code>boolean</code></td> <td align="left"><code>false</code></td> <td align="left">no</td> <td align="left">캐러셀이 자동으로 변경되는지에 대한 설정</td> </tr> <tr> <td align="left">width</td> <td align="left"><code>string</code></td> <td align="left"><code>100%</code></td> <td align="left">no</td> <td align="left">캐러셀의 너비</td> </tr> <tr> <td align="left">height</td> <td align="left"><code>string</code></td> <td align="left"><code>100%</code></td> <td align="left">no</td> <td align="left">캐러셀의 높이</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>버튼을 클릭하면 보여지는 요소가 변경되는 캐러셀 엘리먼트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_slidecarousel&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_slidecarousel_slider&#x27;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_slidecarousel_item&#x27;</span>/&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_slidecarousel_item&#x27;</span>/&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_slidecarousel_rbutton&#x27;</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_slidecarousel_lbutton&#x27;</span>/&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '},w={name:"Change Carousel",render:function(s){var n=s.elems,t=s.auto,a=void 0===t||t,e=s.width,l=void 0===e?"100%":e,p=s.height,i=void 0===p?"100%":p,r=0,o=null,d=c("div","kui_changecarousel");d.style.width=l,d.style.height=i;var h=c("div","kui_changecarousel_btnset"),u=[],g=function(s){u.forEach((function(n,t){s===t?n.children[0].classList.add("select"):n.children[0].classList.remove("select")})),n[r].style.opacity="0",n[r=s].style.opacity="1"},f=function(){o=setInterval((function(){r<n.length-1?g(r+1):g(0)}),3e3)};!function(){for(var s=0;s<n.length;s++){n[s].classList.add("kui_changecarousel_item"),n[s].ontransitionend=function(s){};var t=document.createElement("button");t.innerHTML="\n        <div></div>\n      ",0===s&&(t.children[0].classList.add("select"),n[s].style.opacity="1"),d.appendChild(n[s]),h.appendChild(t),u.push(t)}d.appendChild(h)}();for(var m=function(s){u[s].addEventListener("click",(function(){o&&clearInterval(o),g(s),a&&f()}))},j=0;j<u.length;j++)m(j);return a&&f(),d},prop:{elems:o(),width:"400px",height:"200px"},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/changecarousel">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { changecarousel } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> changecarousel = <span class="hljs-title function_">changecarousel</span>({ \n  <span class="hljs-attr">elems</span>: <span class="hljs-comment">/* Element of carousel elements */</span>\n  <span class="hljs-attr">auto</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">/* auto carousel move flag */</span>\n  <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;carousel width, recommend elems width&#x27;</span>\n  <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;carousel height, recommend elems height&#x27;</span>\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(changecarousel);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">elems</td> <td align="left"><code>HTMLElemet[]</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">캐러셀에 들어갈 엘리먼트 리스트</td> </tr> <tr> <td align="left">auto</td> <td align="left"><code>boolean</code></td> <td align="left"><code>false</code></td> <td align="left">no</td> <td align="left">캐러셀이 자동으로 변경되는지에 대한 설정</td> </tr> <tr> <td align="left">width</td> <td align="left"><code>string</code></td> <td align="left"><code>100%</code></td> <td align="left">no</td> <td align="left">캐러셀의 너비</td> </tr> <tr> <td align="left">height</td> <td align="left"><code>string</code></td> <td align="left"><code>100%</code></td> <td align="left">no</td> <td align="left">캐러셀의 높이</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>버튼을 클릭하면 보여지는 요소가 변경되는 캐러셀 엘리먼트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_changecarousel&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_changecarousel_item&#x27;</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_changecarousel_item&#x27;</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_changecarousel_btnset&#x27;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;select&#x27;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '},L={name:"Context Menu",render:function(s){for(var n=s.config,t=c("div","kui_contextmenu"),a=[],e=[],l=0;l<n.length;l++){var p=c("p","kui_contextmenu_menu");p.innerText=n[l].menu;var i=c("p","kui_contextmenu_context");i.innerText=n[l].context,p.appendChild(i),t.appendChild(p),a.push(p),e.push(i)}return t.addEventListener("click",(function(s){s.stopPropagation(),a.forEach((function(n,t){e[t]!==s.target&&(n===s.target?(e[t].style.display="block",e[t].style.setProperty("--top",s.offsetY+"px"),e[t].style.setProperty("--left",s.offsetX+"px")):e[t].style.display="none")}))})),window.addEventListener("click",(function(s){s.stopPropagation(),e.forEach((function(s){s.style.display="none"}))})),t},prop:{config:[{menu:"1번 메뉴",context:"1번 context"},{menu:"2번 메뉴",context:"2번 context"},{menu:"3번 메뉴",context:"3번 context"},{menu:"4번 메뉴",context:"4번 context"},{menu:"5번 메뉴",context:"5번 context"}]},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/contextmenu">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { contextmenu } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> contextmenu = <span class="hljs-title function_">contextmenu</span>({\n  config = {\n    <span class="hljs-attr">menu</span>: <span class="hljs-string">&#x27;text of menu&#x27;</span>,\n    <span class="hljs-attr">context</span>: <span class="hljs-string">&#x27;text of contextmenu&#x27;</span>\n  }\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(contextmenu);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">config</td> <td align="left"><code>{ menu: string, context: string }[]</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">메뉴 텍스트와 콘텍스트에 보여질 텍스트</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>메뉴를 클릭하면 해당 요소에 해당하는 콘텍스트를 보여주는 컴포넌트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_contextmenu&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_contextmenu_menu&#x27;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_contextmenu_context&#x27;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_contextmenu_menu&#x27;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_contextmenu_context&#x27;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  ...\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '};var E=Array.from({length:100}).map((function(s,n){return n+""})),C={name:"Infinite Scroll",render:function(s){var n=s.fetcher,t=0,e=c("div","kui_infinitescroll"),p=c("div","kui_infinitescroll_trigger");e.appendChild(p);var r=function(){var s=l(i().mark((function s(t){var a,l,r;return i().wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return e.removeChild(p),s.next=3,n(t);case 3:a=s.sent,l=a.data,r=l.map((function(s,n){return'<div class="kui_infinitescroll_li">'.concat(s,"</div>")})).join(""),e.insertAdjacentHTML("beforeend",r),e.appendChild(p);case 8:case"end":return s.stop()}}),s)})));return function(n){return s.apply(this,arguments)}}();return new IntersectionObserver((function(s){a(s,1)[0].isIntersecting&&r(t++)})).observe(p),e},prop:{fetcher:function(){var s=l(i().mark((function s(n){return i().wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,r(E.slice(5*n,5*n+5));case 2:return s.abrupt("return",s.sent);case 3:case"end":return s.stop()}}),s)})));return function(n){return s.apply(this,arguments)}}()},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/infinitescroll">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { infinitescroll } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> infinitescroll = <span class="hljs-title function_">infinitescroll</span>({ \n  <span class="hljs-attr">fetcher</span>: <span class="hljs-comment">/* api fetch function */</span>\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(infinitescroll);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">fetcher</td> <td align="left"><code>(idx: number) =&gt; Promise&lt;{ data: string[] }</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">data를 가져오는 api함수이고, idx는 페이지네이션값</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>scroll을 리스트 최하단까지 내렸을 때 다음 요소를 불러오는 스크롤 엘리먼트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_infinitescroll&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_infinitescroll_li&#x27;</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_infinitescroll_li&#x27;</span>/&gt;</span>\n  ...\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_infinitescroll_trigger&#x27;</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '};const P=C,T={name:"Li Context Menu",render:function(s){var n=s.config,t=c("div","kui_licontextmenu");n.map((function(s){var n=c("div","kui_licontextmenu_icon");n.innerHTML="<p>".concat(s.name,"</p>"),s.li&&n.appendChild(u("main",s.li,n)),t.appendChild(n)}));var a=Array.from(t.children);return a.map((function(s,n){s.addEventListener("click",(function(t){t.stopPropagation();for(var e=0;e<a.length;e++)e===n?1===s.children.length||s.classList.contains("select")?(s.classList.remove("select"),1!==s.children.length&&(s.children[1].style.display="none")):(s.children[1].style.display="block",s.classList.add("select")):1!==a[e].children.length&&(a[e].children[1].style.display="none",a[e].classList.remove("select"))}))})),document.body.addEventListener("click",(function(s){if(!s.target.closest(".kui_licontextmenu"))for(var n=0;n<a.length;n++)1!==a[n].children.length&&(a[n].children[1].style.display="none"),a[n].classList.remove("select")})),t},prop:{config:[{name:"menu1",act:function(){return console.log("menu1 work")}},{name:"menu2",li:[{name:"submenu1",act:function(){return console.log("submenu1 work")}},{name:"submenu2",li:[{name:"subsubemenu1",act:function(){return console.log("subsubemnu1 work")}}]}]},{name:"menu3",li:[{name:"submenu3",act:function(){return console.log("submenu3 work")}}]}]},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/licontextmenu">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { licontextmenu } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> licontextmenu = <span class="hljs-title function_">licontextmenu</span>({ \n  <span class="hljs-attr">config</span>: <span class="hljs-comment">/* data of submenus */</span>\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(licontextmenu);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">config</td> <td align="left"><code>{ name, shorcut?, li?, act? }[]</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">하나의 메뉴에 들어갈 옵션들 값, 아래 참고</td> </tr> </tbody></table> <pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> config = {\n  <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span><span class="hljs-comment">/* string of menu */</span>,\n  shorcut?: <span class="hljs-built_in">string</span><span class="hljs-comment">/* string of shorcut (key bind) */</span>,\n  li?: config[] <span class="hljs-comment">/* sub menu */</span>,\n  act?: <span class="hljs-title class_">Function</span> <span class="hljs-comment">/* act when click menu */</span>,\n}\n</code></pre> <h3 id="기능">기능</h3> <p>메뉴를 클릭하면 해당 메뉴의 하위 메뉴리스트가 표기되는 컴포넌트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_licontextmenu&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_licontextmenu_icon&#x27;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>/&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_licontextmenu_ul&#x27;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_licontextmenu_li&#x27;</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_licontextmenu_subul&#x27;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_licontextmenu_li&#x27;</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_licontextmenu_li&#x27;</span>&gt;</span>\n          ...\n        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_licontextmenu_li&#x27;</span> /&gt;</span>\n      ...\n    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_licontextmenu_icon&#x27;</span> /&gt;</span>\n  ...\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '};Array.from({length:100}).map((function(s,n){return n+""}));const O={name:"Scroll Spy",render:d,prop:{elems:o(),height:"200px"},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/scrollspy">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { scrollspy } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> scrollspy = <span class="hljs-title function_">scrollspy</span>({ \n  <span class="hljs-attr">elems</span>: <span class="hljs-comment">/* Element of inside  */</span>\n  <span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;wrap item height, recommand same of elems&#x27;</span>\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(scrollspy);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">elems</td> <td align="left"><code>HTMLElement[]</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">scolling에 잡힐 각 object</td> </tr> <tr> <td align="left">height</td> <td align="left"><code>string</code></td> <td align="left"><code>100%</code></td> <td align="left">no</td> <td align="left">item wrap height</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>scroll시에 해당 위치를 nav에 표기하거나 nav를 클릭시 해당 위치로 스크롤 이동</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_scrollspy&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_scrollspy_nav&#x27;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_scrollspy_navitem&#x27;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_scrollspy_navitem&#x27;</span> /&gt;</span>\n    ...\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_scrollspy_itemwrap&#x27;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_scrollspy_item&#x27;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_scrollspy_item&#x27;</span> /&gt;</span>\n    ...\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '};var H=function(s){var n=c("div");return n.style.width="500px",n.style.height="150px",n.innerHTML="<p>".concat(s,"</p>"),n};const S={name:"Tab",render:function(s){var n=s.config,t=c("div","kui_tab"),a=c("div","kui_tab_nav"),e=c("div","kui_tab_item"),l=c("div","kui_tab_glider");t.appendChild(a),t.appendChild(e),a.appendChild(l),a.style.setProperty("--num",n.length+"");var p=n.map((function(s,t){var i=s.title,r=c("div","kui_tab_navitem");return 0===t&&r.classList.add("select"),r.innerHTML="<p>".concat(i,"</p>"),r.addEventListener("click",(function(s){return function(s,t){if(!p[t].classList.contains("select")){for(var a=0;a<p.length;a++)p[a].classList.contains("select")&&p[a].classList.remove("select");l.style.setProperty("--idx",t+""),p[t].classList.add("select"),e.innerHTML=n[t].elem.outerHTML}}(0,t)})),a.appendChild(r),r}));return e.innerHTML=n[0].elem.outerHTML,t},prop:{config:[{title:"Tab1",elem:H("This is Tab1")},{title:"Tab2",elem:H("This is Tab2")},{title:"Tab3",elem:H("This is Tab3")}]},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/tab">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { tab } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> tab = <span class="hljs-title function_">tab</span>({ \n  config = [{\n    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;tab name&#x27;</span>,\n    <span class="hljs-attr">elem</span>: <span class="hljs-comment">/* tab HTMLelement */</span>\n  }]\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(tab);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">config</td> <td align="left"><code>{ title: string, elem: HTMLElement}[]</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">tab의 이름과 tab 표시요소를 가진 config</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>엘리먼트를 탭에따라서 화면에 표기하는 컴포넌트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_tab&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_tab_nav&#x27;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_tab_glider&#x27;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_tab_navitem&#x27;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    ...\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_tab_item&#x27;</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- element of config --&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '},M={name:"Btn Menu",render:function(s){var n=s.title,t=void 0===n?"=":n,a=s.config,e=c("div","kui_btnmenu"),l=c("div","kui_btnmenu_btn"),p=c("div","kui_btnmenu_ul"),i=function(){p.style.display="none",l.style.setProperty("--color","rgba(0,0,0,0)")};l.addEventListener("click",(function(s){s.stopPropagation(),"block"===p.style.display?i():(p.style.display="block",l.style.setProperty("--color","#2552E5"))})),"string"==typeof t?l.innerText=t:l.appendChild(t),e.appendChild(l),e.appendChild(p);for(var r=function(s){var n=c("div","kui_btnmenu_li");n.addEventListener("click",(function(n){n.stopPropagation(),a[s].act(),i()})),n.innerText=a[s].name,p.appendChild(n)},o=0;o<a.length;o++)r(o);return window.addEventListener("click",(function(s){s.stopPropagation(),s.target!==e&&i()})),e},prop:{config:[{name:"check console",act:function(){return console.log("bla")}},{name:"check alert",act:function(){return alert("bla")}},{name:"go to other link",act:function(){return history.pushState({},"",window.location.origin+"/other")}}]},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/btnmenu">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { btnmenu } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> btnmenu = <span class="hljs-title function_">btnmenu</span>({ \n  <span class="hljs-attr">title</span>: <span class="hljs-comment">/* button element(like image) or text */</span>,\n  config = {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;menu text&#x27;</span>,\n    <span class="hljs-attr">act</span>: <span class="hljs-comment">/* action function of menu */</span>\n  }[]\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(btnmenu);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">title</td> <td align="left"><code>string | HTMLElement</code></td> <td align="left"><code>&quot;=&quot;</code></td> <td align="left">no</td> <td align="left">버튼에 들어갈 텍스트 / 엘리먼트</td> </tr> <tr> <td align="left">config</td> <td align="left"><code>{ name: string, act: Function }[]</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">메뉴 텍스트 및 메뉴 동작</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>버튼을 누르면 해당하는 메뉴가 나오는 엘리먼트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_btnmenu&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_btnmenu_btn&#x27;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_btnmenu_ul&#x27;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_btnmenu_li&#x27;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_btnmenu_li&#x27;</span> /&gt;</span>\n    ...\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '},K={name:"Check Box",render:g,prop:{init:!1,setChecked:function(){}},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/checkbox">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { checkbox } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> checkbox = <span class="hljs-title function_">checkbox</span>({ \n  <span class="hljs-attr">init</span>: <span class="hljs-comment">/* checked state initialization */</span>,\n  <span class="hljs-attr">setChecked</span>: <span class="hljs-comment">/* Function of state change */</span>\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(checkbox);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">init</td> <td align="left"><code>boolean</code></td> <td align="left"><code>false</code></td> <td align="left">no</td> <td align="left">체크 최초 상태 정의</td> </tr> <tr> <td align="left">setChecked</td> <td align="left">`(check: boolean) =&gt; any</td> <td align="left">void`</td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>해당 요소에 대한 선택 여부를 체크하는 컴포넌트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_checkbox&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_checkbox_outline&#x27;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_checkbox_wave&#x27;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_checkbox_background&#x27;</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '};var A=function(){var s=new Date;return"".concat(s.getFullYear(),"/").concat(s.getMonth(),"/").concat(s.getDate())};const I={name:"List",render:function(s){var n=s.checkoption,t=s.config,e=c("div","kui_list"),l=Array.from({length:t.length}).map((function(s){return!1})),p=c("div","kui_list_title");return Object.entries(t[0]).map((function(s){var n=a(s,2),t=n[0],e=(n[1],c("div","kui_list_item"));"name"===t?(e.innerHTML="<span>".concat(t,"</span>"),p.appendChild(e),e.appendChild(c("div","kui_list_space"))):(e.innerText=t,p.appendChild(e))})),e.appendChild(p),t.forEach((function(s,t){var p=c("div","kui_list_li");Object.entries(s).map((function(s,e){var i=a(s,2),r=i[0],o=i[1],d=c("div","kui_list_item");if("name"===r){if(n){var h=c("span");h.appendChild(g({init:l[t],setChecked:function(s){l[t]=s,n(l)}})),d.append(h)}d.insertAdjacentText("beforeend",o),p.appendChild(d)}else d.innerText=o,p.appendChild(d)})),e.appendChild(p)})),e},prop:{config:[{name:"one",date:A(),description:"bla"},{name:"two",date:A(),description:"blabla"},{name:"three",date:A(),description:"blablabla"}]},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/list">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { list } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> list = <span class="hljs-title function_">list</span>({ \n  <span class="hljs-attr">checkoption</span>: <span class="hljs-comment">/* have checkbox? */</span>\n  config = {\n    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;list name&#x27;</span>,\n    ... <span class="hljs-comment">/* any data of string */</span>\n  }\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(list);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">checkoption</td> <td align="left"><code>(checked: boolean[]) =&gt; any|void</code></td> <td align="left"><code>undefined</code></td> <td align="left">no</td> <td align="left">리스트에 체크를 할때 해야할 상위 동작, 통상 check리스트의 업데이트 활용</td> </tr> <tr> <td align="left">config</td> <td align="left"><code>{ name: string, [key: string]: string }[]</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">list의 요소, 최소 1개 이상의 요소가 반드시 있어야한다</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>리스트 데이터를 받아서 화면에 표기하는 컴포넌트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_list&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_list_title&#x27;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_list_item&#x27;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_list_item&#x27;</span> /&gt;</span>\n    ...\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_kui_list_li&#x27;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_list_item&#x27;</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_list_item&#x27;</span> /&gt;</span>\n    ...\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_kui_list_li&#x27;</span>/&gt;</span>\n  ...\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '};function V(s,n){return s=Math.ceil(s),n=Math.floor(n),Math.floor(Math.random()*(n-s))+s}var U={name:"Dragable Pannel",render:function(s){for(var n=s.elems,t=c("div","kui_dragablepannel"),a=0;a<n.length;a++){var e=f(t);e.appendChild(n[a]),t.appendChild(e)}return t},prop:{elems:function(){for(var s=["black","blue","red","green"],n=[],t=0;t<s.length;t++){var a=c("div");a.style.width=V(100,200)+"px",a.style.height=V(100,200)+"px",a.style.borderRadius="10px",a.style.background=s[t],a.style.textAlign="center",a.innerHTML="<span>TEST</span>",n.push(a)}return n}()},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/dragablepannel">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { dragablepannel } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> dragablepannel = <span class="hljs-title function_">dragablepannel</span>({ \n  <span class="hljs-attr">elems</span>: <span class="hljs-comment">/* Dragable Elements */</span>\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(dragablepannel);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">elems</td> <td align="left"><code>HTMLElement[]</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">드래그될 엘리먼트 리스트</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>특정 요소를 해당 패널 내부에서 드래그하여 이동할 수 있는 컴포넌트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_dragablepannel&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_dragablepannel_drag&#x27;</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- element of parameter --&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_dragablepannel_drag&#x27;</span> /&gt;</span>\n  ...\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '};const F=U,N={name:"Toggle Menu",render:function(s){for(var n=s.init,t=s.type,a=void 0===t?"normal":t,e=s.config,l=c("div","kui_togglemenu"),p=e.map((function(s,t){var a=c("div","kui_togglemenu_icon");switch(e[t].type){case"text":a.innerText=s.src;break;case"img":a.innerHTML="<img src=".concat(s.src," />");break;case"elem":a.appendChild(s.src)}return void 0!==n&&n===t&&a.classList.add("select"),t===e.length-1&&(a.style.borderRight="none"),l.appendChild(a),a})),i=function(s){p[s].addEventListener("click",(function(n){e[s].act(),p.forEach((function(n,t){s!==t?"multi"!==a&&n.classList.remove("select"):n.classList.contains("select")&&"must"!==a?n.classList.remove("select"):n.classList.add("select")}))}))},r=0;r<p.length;r++)i(r);return l},prop:{init:1,type:"must",config:[{type:"text",src:"t1",act:function(){return console.log(1)}},{type:"text",src:"t2",act:function(){return console.log(2)}}]},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/togglemenu">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { togglemenu } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> togglemenu = <span class="hljs-title function_">togglemenu</span>({\n  <span class="hljs-attr">init</span>: <span class="hljs-comment">/* first select index */</span>\n  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;type of select condition&#x27;</span>,\n  config = {\n    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;type of inside of toggle(text / must / multi)&#x27;</span>,\n    <span class="hljs-attr">src</span>: <span class="hljs-comment">/* inside of element in toggle */</span>,\n    <span class="hljs-attr">act</span>: <span class="hljs-comment">/* option of active */</span>\n  }\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(togglemenu);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">init</td> <td align="left"><code>number</code></td> <td align="left"><code>undefined</code></td> <td align="left">no</td> <td align="left">최초 select상태, 없을 수 있음</td> </tr> <tr> <td align="left">type</td> <td align="left"><code>&#39;nomal&#39;|&#39;must&#39;|&#39;multi&#39;</code></td> <td align="left">no</td> <td align="left">버튼 선택 타입</td> <td align="left"></td> </tr> <tr> <td align="left">config</td> <td align="left"><code>Config[](아래 참고)</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">토글버튼의 요소들</td> </tr> </tbody></table> <pre><code class="hljs language-typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">Config</span> = {\n  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;img&#x27;</span>|<span class="hljs-string">&#x27;text&#x27;</span>|<span class="hljs-string">&#x27;elem&#x27;</span>,\n  <span class="hljs-attr">src</span>: <span class="hljs-built_in">string</span> | <span class="hljs-title class_">HTMLElement</span>,\n  <span class="hljs-attr">act</span>: <span class="hljs-title class_">Function</span>\n}\n</code></pre> <h3 id="기능">기능</h3> <p>특정 버튼을 클릭함으로써 해당 속성을 활성화 시키는 멀티버튼</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_togglemenu&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_togglemenu_icon&#x27;</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_togglemenu_icon&#x27;</span>/&gt;</span>\n  ...\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '};var D,B={name:"Badge",render:function(s){var n=s.elem,t=s.fetcher,a=0,e=c("div","kui_badge");e.appendChild(n);var p=c("div","kui_badge_icon");e.appendChild(p);var r=function(){var s=l(i().mark((function s(){return i().wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,t();case 2:0!==(a=s.sent.data)&&(p.innerText=a+"",p.style.display="block");case 4:case"end":return s.stop()}}),s)})));return function(){return s.apply(this,arguments)}}();return r(),e},prop:{elem:(D=c("div"),D.style.width="20px",D.style.height="20px",D.style.borderRadius="3px",D.style.border="1px solid rgba(172, 172, 172, 0.5)",D),fetcher:function(){var s=l(i().mark((function s(){return i().wrap((function(s){for(;;)switch(s.prev=s.next){case 0:return s.next=2,r(5);case 2:return s.abrupt("return",s.sent);case 3:case"end":return s.stop()}}),s)})));return function(){return s.apply(this,arguments)}}()},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/badge">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { badge } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> badge = <span class="hljs-title function_">badge</span>({ \n  <span class="hljs-attr">fethcer</span>: <span class="hljs-keyword">async</span> () =&gt; {}, <span class="hljs-comment">/* get data function */</span>\n  <span class="hljs-attr">elem</span>: <span class="hljs-comment">/* Element of Child */</span>\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(badge);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">fetcher</td> <td align="left"><code>() =&gt; Promise&lt;{data: number | string}&gt;</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">서버로 부터 받아온 정보(반드시 숫자로 변경하여 넘겨줄것)</td> </tr> <tr> <td align="left">elem</td> <td align="left"><code>HTMLElement</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">badge가 적용될 엘리먼트</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>서버로부터 특정 요소의 여부를 확인하여 해당 요소를 엘리먼트의 우상단에 표기, 주로 새로운 요소에 대한 알람으로 활용된다.</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_badge&#x27;</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- This for child element --&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_badge_icon&#x27;</span> /&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '};const R=B,W={name:"Slider",render:function(s){var n=s.setValue,t=s.width,a=void 0===t?100:t,e=s.init,l=void 0===e?0:e,p=c("div","kui_slider");a&&p.style.setProperty("--width",a+"px");var i=c("div","kui_slider_up"),r=c("div","kui_slider_down");p.appendChild(i),p.appendChild(r);var o=c("div","kui_slider_marker");p.appendChild(o);var d=0,h=function(s){n(d=s),o.style.setProperty("--value",d*a+"px"),i.style.setProperty("--scale",100*d+"%"),r.style.setProperty("--scale",100*(1-d)+"%")};h(l);var u=function(s){var n=document.getElementsByClassName("kui_slider")[0],t=s.clientX-n.offsetLeft;t>a||t<0||h(t/a)};return o.addEventListener("mousedown",(function(){window.addEventListener("mousemove",u)})),window.addEventListener("mouseup",(function(){window.removeEventListener("mousemove",u)})),p},prop:{setValue:function(s){},width:150,init:.4},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/slider">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { slider } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> slider = <span class="hljs-title function_">slider</span>({\n  <span class="hljs-attr">setValue</span>: <span class="hljs-comment">/* function of effect on value */</span>,\n  <span class="hljs-attr">width</span>: <span class="hljs-comment">/* width of bar, this is px number */</span>,\n  <span class="hljs-attr">init</span>: <span class="hljs-comment">/* first marker point, range 0 ~ 1 */</span>\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(slider);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">setValue</td> <td align="left"><code>(val:number) =&gt; void|any</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">슬라이더 변화에 따라</td> </tr> <tr> <td align="left">width</td> <td align="left"><code>number</code></td> <td align="left"><code>100</code></td> <td align="left">no</td> <td align="left">슬라이더의 가로 길이 반드시 픽셀단위 정값이 들어간다</td> </tr> <tr> <td align="left">init</td> <td align="left"><code>number(0 ~ 1)</code></td> <td align="left"><code>0</code></td> <td align="left">no</td> <td align="left">슬라이더 최초위치 비율값 0 ~ 1 범위로 입력한다</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>좌우 이동 슬라이더, 값의 비율을 조절하는 컴포넌트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_slider&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_slider_up&#x27;</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_slider_down&#x27;</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_slider_marker&#x27;</span>/&gt;</span>\n  ...\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '},G={name:"Button",render:function(s){var n=s.text,t=void 0===n?"":n,a=s.click,e=void 0===a?function(s){}:a,l=c("div","kui_button"),p=c("div","kui_button_wave");return l.innerText=t,l.appendChild(p),l.addEventListener("mousedown",(function(s){p.ontransitionend=function(){},p.style.setProperty("--duration","0.3s"),p.style.opacity="1",p.style.top=s.clientY-l.offsetTop-100+"px",p.style.left=s.clientX-l.offsetLeft-100+"px",p.style.setProperty("--scale","1")})),l.addEventListener("mouseup",(function(s){p.style.opacity="0",p.ontransitionend=function(){p.style.setProperty("--duration","0s"),p.style.setProperty("--scale","0")},e(s)})),l},prop:{text:"BUTTON",click:function(){}},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/button">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { button } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> button = <span class="hljs-title function_">button</span>({ \n  <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;button text&#x27;</span>,\n  <span class="hljs-attr">click</span>: <span class="hljs-function">(<span class="hljs-params">e: MouseEvent</span>) =&gt;</span> { <span class="hljs-comment">/* button click action */</span> }\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(badge);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">text</td> <td align="left"><code>string</code></td> <td align="left"><code>&#39;&#39;</code></td> <td align="left">no</td> <td align="left">버튼에 들어갈 text값</td> </tr> <tr> <td align="left">click</td> <td align="left"><code>(e: MouseEvent) =&gt; void</code></td> <td align="left"><code>e =&gt; {}</code></td> <td align="left">no</td> <td align="left">버튼 클릭시(<code>mouseup</code>) 작동할 동작</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>마우스 클릭시 적용된 동작을 하는 컴포넌트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_button&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_button_wave&#x27;</span> /&gt;</span> &lt;--! This for animation --&gt;\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '},Y={name:"ON OFF Switch",render:function(s){var n=s.setValue,t=c("div","kui_onoffswitch"),a=c("div","kui_onoffswitch_icon"),e=c("div","kui_onoffswitch_leftbar"),l=c("div","kui_onoffswitch_rightbar");t.appendChild(a),t.appendChild(e),t.appendChild(l);var p=!1;return t.addEventListener("mouseup",(function(s){n(p=!p),p?(a.style.setProperty("--x","110%"),e.style.setProperty("--width","100%"),l.style.setProperty("--width","0%")):(a.style.setProperty("--x","-10%"),e.style.setProperty("--width","0%"),l.style.setProperty("--width","100%"))})),t},prop:{setValue:function(s){}},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/onoffswitch">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { onoffswitch } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> onoffswitch = <span class="hljs-title function_">onoffswitch</span>({\n  <span class="hljs-attr">setValue</span>: <span class="hljs-comment">/* set value of on / off function */</span>\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(onoffswitch);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">setValue</td> <td align="left"><code>(on: boolean) =&gt; void|any</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">버튼 온/오프에 따라 상위 스테이트 값을 변화시키는 함수</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>버튼을 통해 특정 요소의 on/off를 활성화 하는 컴포넌트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_onoffswitch&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_onoffswitch_icon&#x27;</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_onoffswitch_leftbar&#x27;</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_onoffswitch_rigthbar&#x27;</span>/&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '},X={name:"Dropdown",render:function(s){var n=s.tag,t=s.options,a=s.setOption,e=c("div","kui_dropdown"),l=c("div","kui_dropdown_box"),p=c("div","kui_dropdown_menu");e.appendChild(l),l.innerText=n,e.appendChild(p);for(var i=function(s){var n=c("div","kui_dropdown_item");n.innerText=t[s],n.addEventListener("click",(function(n){n.stopPropagation(),l.innerText=t[s],l.classList.remove("active"),p.style.display="none",l.style.color="black",a(t[s],s)})),p.appendChild(n)},r=0;r<t.length;r++)i(r);return l.addEventListener("click",(function(){l.classList.add("active"),p.style.display="block"})),window.addEventListener("click",(function(s){s.target.closest(".kui_dropdown")||(l.classList.remove("active"),p.style.display="none")})),e},prop:{tag:"num",options:["1","2","3"],setOption:function(s,n){}},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/dropdown">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { dropdown } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> dropdown = <span class="hljs-title function_">dropdown</span>({\n  <span class="hljs-attr">tag</span>: <span class="hljs-string">&#x27;place holder of dropdown&#x27;</span>,\n  <span class="hljs-attr">options</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;of&#x27;</span>, <span class="hljs-string">&#x27;dropdown option&#x27;</span>]\n  <span class="hljs-attr">setOption</span>: <span class="hljs-comment">/* Funtion of text, option */</span>\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(dropdown);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">tag</td> <td align="left"><code>string</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">값에대한 placeholder</td> </tr> <tr> <td align="left">options</td> <td align="left"><code>string[]</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">드롭다운의 값 리스트</td> </tr> <tr> <td align="left">setOption</td> <td align="left"><code>(option: string, idx?:number) =&gt; void|any</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">드롭다운이 변경될때 상위 스테이트를 변경하는 함수</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>여러 옵션중 하나를 선택하는 select 컴포넌트</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_dropdown&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_dropdown_box&#x27;</span>/&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_dropdown_menu&#x27;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_dropdown_item&#x27;</span>/&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_dropdown_item&#x27;</span>/&gt;</span>\n    ...\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '};var q=function(s){var n=c("div");return n.style.width="500px",n.style.height="500px",n.style.border="2px solid black",n.style.background=s,n.innerText=s,n.style.textAlign="center",n.style.lineHeight="500px",n};const z={name:"Parallex Scroll",render:function(s){var n=s.config,t=s.height,a=void 0===t?"100%":t,e=c("div","kui_parallexscroll");e.style.height=a;for(var l=[],p=0;p<n.length;p++){var i=c("div","kui_parallexscroll_layer");i.appendChild(n[p].elem),i.style.zIndex=p+10+"",l.push(i),e.appendChild(i)}return e.addEventListener("scroll",(function(s){var t=s.target.scrollTop;l.forEach((function(s,a){t>=a*s.offsetHeight&&s.style.setProperty("--y",t*(n[a].delay<1&&n[a].delay?n[a].delay:1)-function(s){for(var n=0,t=s;t>0;t--)n+=l[s].offsetHeight;return n}(a)+"px")}))})),e},prop:{config:[{elem:q("blue"),delay:.5},{elem:q("green")},{elem:q("red"),delay:1}],height:"500px"},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/parallexscroll">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { parallexscroll } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> parallexscroll = <span class="hljs-title function_">parallexscroll</span>({\n  config = {\n    <span class="hljs-attr">elem</span>: <span class="hljs-comment">/* element of scroll */</span>,\n    <span class="hljs-attr">delay</span>: <span class="hljs-comment">/* delay movement of scroll(0 ~ 1) */</span>\n  }\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(parallexscroll);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">config</td> <td align="left"><code>{ elem: HTMLElement, delay: number(0 ~ 1)}[]</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">스크롤링될 요소와 해당 요소의 이동 딜레이(0 ~ 1), 없을시 1, 1이면 이동없음</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>스크롤시 상위 레이어의 이동이 비동일하게 스크롤되는 요소</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_parallexscroll&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_parallexscroll_layer&#x27;</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- element of cofig --&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_parallexscroll_layer&#x27;</span> /&gt;</span>\n  ...\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '},$={name:"Point Line",render:function(s){var n=s.width,t=s.height,a=s.num,e=(s.text,c("div","kui_pointline")),l=c("canvas","kui_pointline_canvas");l.width=n,l.height=t,e.appendChild(l);var p=function(s){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{fillstyle:"black",strokestyle:"black",linewidth:1,font:"10px serif"},t=s.getContext("2d"),a=v(v({},n),{},{range:[0,1]}),e=function(s,n){for(var t=v({},a),e=0;e<s.length;e++)t[s[e]]=n[s[e]]?n[s[e]]:t[s[e]];return t},l=function(s,n){var l=n?e(["strokestyle","linewidth"],n):a,p=l.strokestyle,i=l.linewidth,r=t.strokeStyle,c=t.lineWidth;t.strokeStyle=p,t.lineWidth=i,t.lineCap="round",t.beginPath(),t.moveTo(s[0][0],s[0][1]);for(var o=1;o<s.length;o++)t.lineTo(s[o][0],s[o][1]);t.stroke(),t.closePath(),t.strokeStyle=r,t.lineWidth=c},p=function(s,n){console.log(a);var l=(n?e(["fillstyle"],n):a).fillstyle,p=t.fillStyle;t.fillStyle=l,t.fillRect.apply(t,h(s[0]).concat(h(s[1]))),t.strokeRect.apply(t,h(s[0]).concat(h(s[1]))),t.fillStyle=p},i=function(s,n){var l=n?e(["fillstyle","strokestyle","linewidth"],n):a,i=l.fillstyle,r=l.strokestyle,c=l.linewidth,o=t.strokeStyle,d=t.lineWidth;p(s,{fillstyle:i}),t.strokeStyle=r,t.lineWidth=c,t.strokeRect.apply(t,h(s[0]).concat(h(s[1]))),t.strokeStyle=o,t.lineWidth=d},r=function(s,n,l){var p=l?e(["range","fillstyle"],l):a,i=p.range,r=p.fillstyle,c=t.fillStyle;t.fillStyle=r,t.beginPath(),t.arc.apply(t,h(s).concat([n,i[0]*Math.PI*2,i[1]*Math.PI*2])),t.fill(),t.fillStyle=c},c=function(s,n,l){var p=l?e(["range","strokestyle","linewidth"],l):a,i=p.range,r=p.strokestyle,c=p.linewidth,o=t.strokeStyle,d=t.lineWidth;t.strokeStyle=r,t.lineWidth=c,t.beginPath(),i?t.arc.apply(t,h(s).concat([n,i[0]*Math.PI*2,i[1]*Math.PI*2])):t.arc.apply(t,h(s).concat([n,0,2*Math.PI])),t.stroke(),t.strokeStyle=o,t.lineWidth=d},o=function(s,n,t){var l=t?e(["range","fillstyle","linewidth","strokestyle"],t):a,p=l.range,i=l.fillstyle,o=l.strokestyle,d=l.linewidth;r(s,n,{range:p,fillstyle:i}),c(s,n,{range:p,strokestyle:o,linewidth:d})},d=function(s,n,l){var p=l?e(["fillstyle","font"],l):a,i=p.fillstyle,r=p.font,c=null==l?void 0:l.maxwidth,o=t.fillStyle,d=t.font;t.fillStyle=i,t.font=r,t.fillText.apply(t,[s].concat(h(n),[c])),t.font=d,t.fillStyle=o};return{ctx:t,drawLine:l,drawRect:p,drawCircle:r,drawArc:c,drawStrokeRect:i,drawStrokeCircle:o,drawText:d}}(l),i=n-80;p.drawLine([[20,t/2],[i+20,t/2]],{linewidth:5,strokestyle:"orange"});for(var r=0;r<a;r++)p.drawLine([[20+i/(a-1)*r,t/2],[20+i/(a-1)*r+20,t/2+t/8*(r%2==0?1:-1)]],{strokestyle:"orange",linewidth:5}),p.drawStrokeCircle([20+i/(a-1)*r,t/2],8,{strokestyle:"orange",fillstyle:"white",linewidth:5}),p.drawText("TEXT_".concat(r),[20+i/(a-1)*r+20,t/2+t/6*(r%2==0?1:-1)]);return e},prop:{width:500,height:500,num:5},explain:""};var J={autocomplete:k,badge:R,button:G,changecarousel:w,slidecarousel:_,contextmenu:L,infinitescroll:P,licontextmenu:T,scrollspy:O,scrollnav:{name:"Scroll Nav",render:d,prop:{elems:o(),height:"200px"},explain:'<p>ver1.0 (<a href="https://github.com/Komponent1/Komponent/tree/master/Vanilla/app/srcs/components/scrollnav">github link</a>)</p> <h3 id="how-to-use">How to Use</h3> <pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { scrollnav } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;komponent/vanilla/component&#x27;</span>;\n\n<span class="hljs-keyword">const</span> scrollnav = <span class="hljs-title function_">scrollnav</span>({ \n  <span class="hljs-attr">scrolldiv</span>: <span class="hljs-comment">/* scroll wrapper */</span>,\n  <span class="hljs-attr">elems</span>: <span class="hljs-comment">/* Element of scrolling  */</span>\n});\n\n<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(scrollnav);\n</code></pre> <h3 id="parameter">Parameter</h3> <table> <thead> <tr> <th align="left">name</th> <th align="left">type</th> <th align="left">default</th> <th align="left">must</th> <th align="left">explain</th> </tr> </thead> <tbody><tr> <td align="left">scrolldiv</td> <td align="left"><code>HTMLElement</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">scoll element를 담은 상위 컴포넌트, position반드시 relative</td> </tr> <tr> <td align="left">elems</td> <td align="left"><code>HTMLElement[]</code></td> <td align="left"><code>undefined</code></td> <td align="left">yes</td> <td align="left">scolling에 잡힐 각 object</td> </tr> </tbody></table> <h3 id="기능">기능</h3> <p>scroll시에 해당 위치를 nav에 표기하거나 nav를 클릭시 해당 위치로 스크롤 이동하는 navigation</p> <h3 id="structurefor-styling">structure(for styling)</h3> <pre><code class="hljs language-html">\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_scrollnav&#x27;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_scrollnav_item&#x27;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;kui_scrollnav_item&#x27;</span> /&gt;</span>\n    ...\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre> '},tab:S,btnmenu:M,checkbox:K,list:I,dragablepannel:F,togglemenu:N,slider:W,onoffswitch:Y,dropdown:X,parallexscroll:z,pointline:$};const Q=function(s){s.innerHTML="\n    <h1>HELLO! THIS IS KOMPONENT</h1>\n    <p>Komponent는 Web개발에서 자주 사용되는 Komponent를 만들어보고 공유하는 플랫폼입니다.</p>\n  "};function Z(s,n){var t=Object.keys(s);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(s);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(s,n).enumerable}))),t.push.apply(t,a)}return t}const ss=function(s,n,t,a,e){var l=document.getElementById("root");window.history.pushState({},s,window.location.origin+"/vanilla/"+s),n?function(s,n,t,a,e){e.innerHTML="",e.appendChild(function(s,n,t){var a=document.createElement("div");a.classList.add("content_box");var e=c("h1","title");e.innerText=s;var l=c("div","example");l.appendChild(t);var p=c("div","explain");return p.innerHTML=n,a.appendChild(e),a.insertAdjacentHTML("beforeend","<h2>Example</h2>"),a.appendChild(l),a.appendChild(p),a}(s,a,n(function(s){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Z(Object(t),!0).forEach((function(n){m(s,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(s,Object.getOwnPropertyDescriptors(t)):Z(Object(t)).forEach((function(n){Object.defineProperty(s,n,Object.getOwnPropertyDescriptor(t,n))}))}return s}({},t)))),window.scrollTo(0,0)}(n,t,a,e,l):Q(l)};var ns=document.getElementById("menu");ns.innerHTML="<h2>Components</h2>",Object.entries(J).forEach((function(s){var n=a(s,2),t=n[0],e=n[1],l=document.createElement("li");return l.innerText=e.name,l.addEventListener("click",(function(){ss(t,e.name,e.render,e.prop,e.explain),Array.from(ns.children).forEach((function(s){s===l?s.classList.add("select"):s.classList.remove("select")}))})),ns.appendChild(l),l}));var ts=document.getElementById("header"),as=c("h1","title");as.innerText="Komponent",as.addEventListener("click",(function(s){ss("")})),ts.appendChild(as);var es=document.getElementById("root");window.onload=function(){var s=window.location.pathname.split("/").filter((function(s){return""!==s})).pop();switch(s){case"vanilla":Q(es);break;case void 0:ss("");break;default:var n=J[s];ss(s,n.name,n.render,n.prop,n.explain)}}})()})();